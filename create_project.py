
import os

project_structure = {
    "wildberries_project": {
        "app": {
            "__init__.py": "",
            "main.py": (
                "from fastapi import FastAPI\n"
                "from app.api.v1.endpoints import wildberries\n"
                "from app.database import engine\n"
                "from app import models\n\n"
                "models.Base.metadata.create_all(bind=engine)\n\n"
                "app = FastAPI()\n\n"
                "app.include_router(wildberries.router, prefix=\"/api/v1\", tags=[\"wildberries\"])\n"
            ),
            "models.py": (
                "from sqlalchemy import Column, Integer, String, Boolean, ForeignKey, Float, DateTime\n"
                "from sqlalchemy.orm import relationship\n"
                "from sqlalchemy.ext.declarative import declarative_base\n\n"
                "Base = declarative_base()\n\n"
                "class Seller(Base):\n"
                "    __tablename__ = \"sellers\"\n\n"
                "    id = Column(Integer, primary_key=True, index=True)\n"
                "    name = Column(String, unique=True, index=True)\n"
                "    api_key = Column(String)\n"
                "    subscription_level = Column(String, default=\"no_subscription\")\n\n"
                "    # Relationships\n"
                "    expenses = relationship(\"Expense\", back_populates=\"seller\")\n\n"
                "class Expense(Base):\n"
                "    __tablename__ = \"expenses\"\n\n"
                "    id = Column(Integer, primary_key=True, index=True)\n"
                "    seller_id = Column(Integer, ForeignKey(\"sellers.id\"))\n"
                "    item_name = Column(String)\n"
                "    ad_cost = Column(Float)\n"
                "    photo_cost = Column(Float)\n"
                "    salary_cost = Column(Float)\n"
                "    other_cost = Column(Float)\n\n"
                "    # Relationships\n"
                "    seller = relationship(\"Seller\", back_populates=\"expenses\")\n\n"
                "class Category(Base):\n"
                "    __tablename__ = \"categories\"\n\n"
                "    id = Column(Integer, primary_key=True, index=True)\n"
                "    name = Column(String)\n"
                "    is_visible = Column(Boolean)\n\n"
                "class SubCategory(Base):\n"
                "    __tablename__ = \"subcategories\"\n\n"
                "    subject_id = Column(Integer, primary_key=True, index=True)\n"
                "    parent_id = Column(Integer)\n"
                "    subject_name = Column(String)\n"
                "    parent_name = Column(String)\n\n"
                "class Good(Base):\n"
                "    __tablename__ = \"goods\"\n\n"
                "    nm_id = Column(Integer, primary_key=True, index=True)\n"
                "    vendor_code = Column(String)\n"
                "    currency_iso_code = Column(String)\n"
                "    discount = Column(Integer)\n"
                "    date_received = Column(String)\n\n"
                "class Size(Base):\n"
                "    __tablename__ = \"sizes\"\n\n"
                "    id = Column(Integer, primary_key=True, index=True)\n"
                "    good_nm_id = Column(Integer, ForeignKey('goods.nm_id'))\n"
                "    size_id = Column(Integer)\n"
                "    price = Column(Integer)\n"
                "    discounted_price = Column(Float)\n"
                "    tech_size_name = Column(String)\n\n"
                "class Stock(Base):\n"
                "    __tablename__ = \"stocks\"\n\n"
                "    sku = Column(String, primary_key=True, index=True)\n"
                "    amount = Column(Integer)\n\n"
                "class Income(Base):\n"
                "    __tablename__ = \"incomes\"\n\n"
                "    income_id = Column(Integer, primary_key=True, index=True)\n"
                "    number = Column(String)\n"
                "    date = Column(String)\n"
                "    last_change_date = Column(String)\n"
                "    supplier_article = Column(String)\n"
                "    tech_size = Column(String)\n"
                "    barcode = Column(String)\n"
                "    quantity = Column(Integer)\n"
                "    total_price = Column(Float)\n"
                "    date_close = Column(String)\n"
                "    warehouse_name = Column(String)\n"
                "    nm_id = Column(Integer)\n"
                "    status = Column(String)\n\n"
                "class SupplierStock(Base):\n"
                "    __tablename__ = \"supplier_stocks\"\n\n"
                "    last_change_date = Column(String)\n"
                "    warehouse_name = Column(String)\n"
                "    supplier_article = Column(String)\n"
                "    nm_id = Column(Integer)\n"
                "    barcode = Column(String)\n"
                "    quantity = Column(Integer)\n"
                "    in_way_to_client = Column(Integer)\n"
                "    in_way_from_client = Column(Integer)\n"
                "    quantity_full = Column(Integer)\n"
                "    category = Column(String)\n"
                "    subject = Column(String)\n"
                "    brand = Column(String)\n"
                "    tech_size = Column(String)\n"
                "    price = Column(Float)\n"
                "    discount = Column(Float)\n"
                "    is_supply = Column(Boolean)\n"
                "    is_realization = Column(Boolean)\n"
                "    sc_code = Column(String)\n\n"
                "class Order(Base):\n"
                "    __tablename__ = \"orders\"\n\n"
                "    date = Column(String)\n"
                "    last_change_date = Column(String)\n"
                "    warehouse_name = Column(String)\n"
                "    country_name = Column(String)\n"
                "    oblast_okrug_name = Column(String)\n"
                "    region_name = Column(String)\n"
                "    supplier_article = Column(String)\n"
                "    nm_id = Column(Integer)\n"
                "    barcode = Column(String)\n"
                "    category = Column(String)\n"
                "    subject = Column(String)\n"
                "    brand = Column(String)\n"
                "    tech_size = Column(String)\n"
                "    income_id = Column(Integer)\n"
                "    is_supply = Column(Boolean)\n"
                "    is_realization = Column(Boolean)\n"
                "    total_price = Column(Float)\n"
                "    discount_percent = Column(Integer)\n"
                "    spp = Column(Float)\n"
                "    finished_price = Column(Float)\n"
                "    price_with_disc = Column(Float)\n"
                "    is_cancel = Column(Boolean)\n"
                "    cancel_date = Column(String)\n"
                "    order_type = Column(String)\n"
                "    sticker = Column(String)\n"
                "    g_number = Column(String)\n"
                "    srid = Column(String)\n\n"
                "class Sale(Base):\n"
                "    __tablename__ = \"sales\"\n\n"
                "    date = Column(String)\n"
                "    last_change_date = Column(String)\n"
                "    warehouse_name = Column(String)\n"
                "    country_name = Column(String)\n"
                "    oblast_okrug_name = Column(String)\n"
                "    region_name = Column(String)\n"
                "    supplier_article = Column(String)\n"
                "    nm_id = Column(Integer)\n"
                "    barcode = Column(String)\n"
                "    category = Column(String)\n"
                "    subject = Column(String)\n"
                "    brand = Column(String)\n"
                "    tech_size = Column(String)\n"
                "    income_id = Column(Integer)\n"
                "    is_supply = Column(Boolean)\n"
                "    is_realization = Column(Boolean)\n"
                "    total_price = Column(Float)\n"
                "    discount_percent = Column(Integer)\n"
                "    spp = Column(Float)\n"
                "    payment_sale_amount = Column(Integer)\n"
                "    for_pay = Column(Float)\n"
                "    finished_price = Column(Float)\n"
                "    price_with_disc = Column(Float)\n"
                "    sale_id = Column(String, primary_key=True, index=True)\n"
                "    order_type = Column(String)\n"
                "    sticker = Column(String)\n"
                "    g_number = Column(String)\n"
                "    srid = Column(String)\n\n"
                "class ReportDetail(Base):\n"
                "    __tablename__ = \"report_details\"\n\n"
                "    realizationreport_id = Column(Integer, primary_key=True, index=True)\n"
                "    date_from = Column(String)\n"
                "    date_to = Column(String)\n"
                "    create_dt = Column(String)\n"
                "    currency_name = Column(String)\n"
                "    suppliercontract_code = Column(String)\n"
                "   rrd_id = Column(Integer)\n"
                "    gi_id = Column(Integer)\n"
                "    subject_name = Column(String)\n"
                "    nm_id = Column(Integer)\n"
                "    brand_name = Column(String)\n"
                "    sa_name = Column(String)\n"
                "    ts_name = Column(String)\n"
                "    barcode = Column(String)\n"
                "    doc_type_name = Column(String)\n"
                "    quantity = Column(Integer)\n"
                "    retail_price = Column(Float)\n"
                "    retail_amount = Column(Float)\n"
                "    sale_percent = Column(Float)\n"
                "    commission_percent = Column(Float)\n"
                "    office_name = Column(String)\n"
                "    supplier_oper_name = Column(String)\n"
                "    order_dt = Column(String)\n"
                "    sale_dt = Column(String)\n"
                "    rr_dt = Column(String)\n"
                "    shk_id = Column(Integer)\n"
                "    retail_price_withdisc_rub = Column(Float)\n"
                "    delivery_amount = Column(Integer)\n"
                "    return_amount = Column(Integer)\n"
                "    delivery_rub = Column(Float)\n"
                "    gi_box_type_name = Column(String)\n"
                "    product_discount_for_report = Column(Float)\n"
                "    supplier_promo = Column(Float)\n"
                "    rid = Column(Integer)\n"
                "    ppvz_spp_prc = Column(Float)\n"
                "    ppvz_kvw_prc_base = Column(Float)\n"
                "    ppvz_kvw_prc = Column(Float)\n"
                "    ppvz_office_id = Column(Integer)\n"
                "    ppvz_office_name = Column(String)\n"
                "    ppvz_supplier_id = Column(Integer)\n"
                "    ppvz_supplier_name = Column(String)\n"
                "    ppvz_inn = Column(String)\n"
                "    declaration_number = Column(String)\n"
                "    sticker_id = Column(String)\n"
                "    site_country = Column(String)\n"
                "    penalty = Column(Float)\n"
                "    additional_payment = Column(Float)\n"
                "    kiz = Column(String)\n"
                "    srid = Column(String)\n"
            ),
            "schemas.py": (
                "from typing import List, Optional\n"
                "from pydantic import BaseModel\n\n"
                "# Схемы Pydantic\n"
                "class CategoryBase(BaseModel):\n"
                "    name: str\n"
                "    is_visible: bool\n\n"
                "class CategoryCreate(CategoryBase):\n"
                "    pass\n\n"
                "class Category(CategoryBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class SubCategoryBase(BaseModel):\n"
                "    subject_id: int\n"
                "    parent_id: int\n"
                "    subject_name: str\n"
                "    parent_name: str\n\n"
                "class SubCategoryCreate(SubCategoryBase):\n"
                "    pass\n\n"
                "class SubCategory(SubCategoryBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class GoodBase(BaseModel):\n"
                "    nm_id: int\n"
                "    vendor_code: str\n"
                "    currency_iso_code: str\n"
                "    discount: int\n"
                "    date_received: str\n\n"
                "class GoodCreate(GoodBase):\n"
                "    pass\n\n"
                "class Good(GoodBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class SizeBase(BaseModel):\n"
                "    id: int\n"
                "    good_nm_id: int\n"
                "    size_id: int\n"
                "    price: int\n"
                "    discounted_price: float\n"
                "    tech_size_name: str\n\n"
                "class SizeCreate(SizeBase):\n"
                "    pass\n\n"
                "class Size(SizeBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class StockBase(BaseModel):\n"
                "    sku: str\n"
                "    amount: int\n\n"
                "class StockCreate(StockBase):\n"
                "    pass\n\n"
                "class Stock(StockBase):\n"
                "    sku: str\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class IncomeBase(BaseModel):\n"
                "    income_id: int\n"
                "    number: str\n"
                "    date: str\n"
                "    last_change_date: str\n"
                "    supplier_article: str\n"
                "    tech_size: str\n"
                "    barcode: str\n"
                "    quantity: int\n"
                "    total_price: float\n"
                "    date_close: str\n"
                "    warehouse_name: str\n"
                "    nm_id: int\n"
                "    status: str\n\n"
                "class IncomeCreate(IncomeBase):\n"
                "    pass\n\n"
                "class Income(IncomeBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class SupplierStockBase(BaseModel):\n"
                "    last_change_date: str\n"
                "    warehouse_name: str\n"
                "    supplier_article: str\n"
                "    nm_id: int\n"
                "    barcode: str\n"
                "    quantity: int\n"
                "    in_way_to_client: int\n"
                "    in_way_from_client: int\n"
                "    quantity_full: int\n"
                "    category: str\n"
                "    subject: str\n"
                "    brand: str\n"
                "    tech_size: str\n"
                "    price: float\n"
                "    discount: float\n"
                "    is_supply: bool\n"
                "    is_realization: bool\n"
                "    sc_code: str\n\n"
                "class SupplierStockCreate(SupplierStockBase):\n"
                "    pass\n\n"
                "class SupplierStock(SupplierStockBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class OrderBase(BaseModel):\n"
                "    date: str\n"
                "    last_change_date: str\n"
                "    warehouse_name: str\n"
                "    country_name: str\n"
                "    oblast_okrug_name: str\n"
                "    region_name: str\n"
                "    supplier_article: str\n"
                "    nm_id: int\n"
                "    barcode: str\n"
                "    category: str\n"
                "    subject: str\n"
                "    brand: str\n"
                "    tech_size: str\n"
                "    income_id: int\n"
                "    is_supply: bool\n"
                "    is_realization: bool\n"
                "    total_price: float\n"
                "    discount_percent: int\n"
                "    spp: float\n"
                "    finished_price: float\n"
                "    price_with_disc: float\n"
                "    is_cancel: bool\n"
                "    cancel_date: str\n"
                "    order_type: str\n"
                "    sticker: str\n"
                "    g_number: str\n"
                "    srid: str\n\n"
                "class OrderCreate(OrderBase):\n"
                "    pass\n\n"
                "class Order(OrderBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class SaleBase(BaseModel):\n"
                "    date: str\n"
                "    last_change_date: str\n"
                "    warehouse_name: str\n"
                "    country_name: str\n"
                "    oblast_okrug_name: str\n"
                "    region_name: str\n"
                "    supplier_article: str\n"
                "    nm_id: int\n"
                "    barcode: str\n"
                "    category: str\n"
                "    subject: str\n"
                "    brand: str\n"
                "    tech_size: str\n"
                "    income_id: int\n"
                "    is_supply: bool\n"
                "    is_realization: bool\n"
                "    total_price: float\n"
                "    discount_percent: int\n"
                "    spp: float\n"
                "    payment_sale_amount: int\n"
                "    for_pay: float\n"
                "    finished_price: float\n"
                "    price_with_disc: float\n"
                "    sale_id: str\n"
                "    order_type: str\n"
                "    sticker: str\n"
                "    g_number: str\n"
                "    srid: str\n\n"
                "class SaleCreate(SaleBase):\n"
                "    pass\n\n"
                "class Sale(SaleBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n\n"
                "class ReportDetailBase(BaseModel):\n"
                "    realizationreport_id: int\n"
                "    date_from: str\n"
                "    date_to: str\n"
                "    create_dt: str\n"
                "    currency_name: str\n"
                "    suppliercontract_code: str\n"
                "    rrd_id: int\n"
                "    gi_id: int\n"
                "    subject_name: str\n"
                "    nm_id: int\n"
                "    brand_name: str\n"
                "    sa_name: str\n"
                "    ts_name: str\n"
                "    barcode: str\n"
                "    doc_type_name: str\n"
                "    quantity: int\n"
                "    retail_price: float\n"
                "    retail_amount: float\n"
                "    sale_percent: float\n"
                "    commission_percent: float\n"
                "    office_name: str\n"
                "    supplier_oper_name: str\n"
                "    order_dt: str\n"
                "    sale_dt: str\n"
                "    rr_dt: str\n"
                "    shk_id: int\n"
                "    retail_price_withdisc_rub: float\n"
                "    delivery_amount: int\n"
                "    return_amount: int\n"
                "    delivery_rub: float\n"
                "    gi_box_type_name: str\n"
                "    product_discount_for_report: float\n"
                "    supplier_promo: float\n"
                "    rid: int\n"
                "    ppvz_spp_prc: float\n"
                "    ppvz_kvw_prc_base: float\n"
                "    ppvz_kvw_prc: float\n"
                "    ppvz_office_id: int\n"
                "    ppvz_office_name: str\n"
                "    ppvz_supplier_id: int\n"
                "    ppvz_supplier_name: str\n"
                "    ppvz_inn: str\n"
                "    declaration_number: str\n"
                "    sticker_id: str\n"
                "    site_country: str\n"
                "    penalty: float\n"
                "    additional_payment: float\n"
                "    kiz: str\n"
                "    srid: str\n\n"
                "class ReportDetailCreate(ReportDetailBase):\n"
                "    pass\n\n"
                "class ReportDetail(ReportDetailBase):\n"
                "    id: int\n\n"
                "    class Config:\n"
                "        orm_mode = True\n"
            ),
            "crud.py": (
                "from sqlalchemy.orm import Session\n"
                "from app import models, schemas\n\n"
                "# CRUD операции для новых моделей\n"
                "def get_category(db: Session, category_id: int):\n"
                "    return db.query(models.Category).filter(models.Category.id == category_id).first()\n\n"
                "def create_category(db: Session, category: schemas.CategoryCreate):\n"
                "    db_category = models.Category(**category.dict())\n"
                "    db.add(db_category)\n"
                "    db.commit()\n"
                "    db.refresh(db_category)\n"
                "    return db_category\n\n"
                "def get_subcategory(db: Session, subcategory_id: int):\n"
                "    return db.query(models.SubCategory).filter(models.SubCategory.id == subcategory_id).first()\n\n"
                "def create_subcategory(db: Session, subcategory: schemas.SubCategoryCreate):\n"
                "    db_subcategory = models.SubCategory(**subcategory.dict())\n"
                "    db.add(db_subcategory)\n"
                "    db.commit()\n"
                "    db.refresh(db_subcategory)\n"
                "    return db_subcategory\n\n"
                "def get_good(db: Session, good_id: int):\n"
                "    return db.query(models.Good).filter(models.Good.id == good_id).first()\n\n"
                "def create_good(db: Session, good: schemas.GoodCreate):\n"
                "    db_good = models.Good(**good.dict())\n"
                "    db.add(db_good)\n"
                "    db.commit()\n"
                "    db.refresh(db_good)\n"
                "    return db_good\n\n"
                "def get_size(db: Session, size_id: int):\n"
                "    return db.query(models.Size).filter(models.Size.id == size_id).first()\n\n"
                "def create_size(db: Session, size: schemas.SizeCreate):\n"
                "    db_size = models.Size(**size.dict())\n"
                "    db.add(db_size)\n"
                "    db.commit()\n"
                "    db.refresh(db_size)\n"
                "    return db_size\n\n"
                "def get_stock(db: Session, sku: str):\n"
                "    return db.query(models.Stock).filter(models.Stock.sku == sku).first()\n\n"
                "def create_stock(db: Session, stock: schemas.StockCreate):\n"
                "    db_stock = models.Stock(**stock.dict())\n"
                "    db.add(db_stock)\n"
                "    db.commit()\n"
                "    db.refresh(db_stock)\n"
                "    return db_stock\n\n"
                "def get_income(db: Session, income_id: int):\n"
                "    return db.query(models.Income).filter(models.Income.id == income_id).first()\n\n"
                "def create_income(db: Session, income: schemas.IncomeCreate):\n"
                "    db_income = models.Income(**income.dict())\n"
                "    db.add(db_income)\n"
                "    db.commit()\n"
                "    db.refresh(db_income)\n"
                "    return db_income\n\n"
                "def get_supplier_stock(db: Session, stock_id: int):\n"
                "    return db.query(models.SupplierStock).filter(models.SupplierStock.id == stock_id).first()\n\n"
                "def create_supplier_stock(db: Session, stock: schemas.SupplierStockCreate):\n"
                "    db_supplier_stock = models.SupplierStock(**stock.dict())\n"
                "    db.add(db_supplier_stock)\n"
                "    db.commit()\n"
                "    db.refresh(db_supplier_stock)\n"
                "    return db_supplier_stock\n\n"
                "def get_order(db: Session, order_id: int):\n"
                "    return db.query(models.Order).filter(models.Order.id == order_id).first()\n\n"
                "def create_order(db: Session, order: schemas.OrderCreate):\n"
                "    db_order = models.Order(**order.dict())\n"
                "    db.add(db_order)\n"
                "    db.commit()\n"
                "    db.refresh(db_order)\n"
                "    return db_order\n\n"
                "def get_sale(db: Session, sale_id: str):\n"
                "    return db.query(models.Sale).filter(models.Sale.sale_id == sale_id).first()\n\n"
                "def create_sale(db: Session, sale: schemas.SaleCreate):\n"
                "    db_sale = models.Sale(**sale.dict())\n"
                "    db.add(db_sale)\n"
                "    db.commit()\n"
                "    db.refresh(db_sale)\n"
                "    return db_sale\n\n"
                "def get_report_detail(db: Session, report_id: int):\n"
                "    return db.query(models.ReportDetail).filter(models.ReportDetail.id == report_id).first()\n\n"
                "def create_report_detail(db: Session, report_detail: schemas.ReportDetailCreate):\n"
                "    db_report_detail = models.ReportDetail(**report_detail.dict())\n"
                "    db.add(db_report_detail)\n"
                "    db.commit()\n"
                "    db.refresh(db_report_detail)\n"
                "    return db_report_detail\n"
            ),
            "database.py": (
                "import os\n"
                "from sqlalchemy import create_engine\n"
                "from sqlalchemy.ext.declarative import declarative_base\n"
                "from sqlalchemy.orm import sessionmaker\n"
                "from dotenv import load_dotenv\n\n"
                "load_dotenv()\n\n"
                "DATABASE_URL = os.getenv(\"DATABASE_URL\")\n\n"
                "engine = create_engine(DATABASE_URL)\n"
                "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n"
                "Base = declarative_base()\n"
            ),
            "api": {
                "__init__.py": "",
                "v1": {
                    "__init__.py": "",
                    "endpoints": {
                        "__init__.py": "",
                        "wildberries.py": (
                            "from fastapi import APIRouter, Depends, HTTPException\n"
                            "from sqlalchemy.orm import Session\n"
                            "from app import crud, models, schemas\n"
                            "from app.database import SessionLocal\n\n"
                            "router = APIRouter()\n\n"
                            "def get_db():\n"
                            "    db = SessionLocal()\n"
                            "    try:\n"
                            "        yield db\n"
                            "    finally:\n"
                            "        db.close()\n\n"
                            "@router.post(\"/categories/\", response_model=schemas.Category)\n"
                            "def create_category(category: schemas.CategoryCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_category(db=db, category=category)\n\n"
                            "@router.post(\"/subcategories/\", response_model=schemas.SubCategory)\n"
                            "def create_subcategory(subcategory: schemas.SubCategoryCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_subcategory(db=db, subcategory=subcategory)\n\n"
                            "@router.post(\"/goods/\", response_model=schemas.Good)\n"
                            "def create_good(good: schemas.GoodCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_good(db=db, good=good)\n\n"
                            "@router.post(\"/sizes/\", response_model=schemas.Size)\n"
                            "def create_size(size: schemas.SizeCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_size(db=db, size=size)\n\n"
                            "@router.post(\"/stocks/\", response_model=schemas.Stock)\n"
                            "def create_stock(stock: schemas.StockCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_stock(db=db, stock=stock)\n\n"
                            "@router.post(\"/incomes/\", response_model=schemas.Income)\n"
                            "def create_income(income: schemas.IncomeCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_income(db=db, income=income)\n\n"
                            "@router.post(\"/supplier_stocks/\", response_model=schemas.SupplierStock)\n"
                            "def create_supplier_stock(supplier_stock: schemas.SupplierStockCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_supplier_stock(db=db, supplier_stock=supplier_stock)\n\n"
                            "@router.post(\"/orders/\", response_model=schemas.Order)\n"
                            "def create_order(order: schemas.OrderCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_order(db=db, order=order)\n\n"
                            "@router.post(\"/sales/\", response_model=schemas.Sale)\n"
                            "def create_sale(sale: schemas.SaleCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_sale(db=db, sale=sale)\n\n"
                            "@router.post(\"/report_details/\", response_model=schemas.ReportDetail)\n"
                            "def create_report_detail(report_detail: schemas.ReportDetailCreate, db: Session = Depends(get_db)):\n"
                            "    return crud.create_report_detail(db=db, report_detail=report_detail)\n"
                        )
                    }
                }
            }
        },
        "alembic": {
            "versions": {},
            "env.py": (
                "from logging.config import fileConfig\n"
                "from sqlalchemy import engine_from_config\n"
                "from sqlalchemy import pool\n"
                "from alembic import context\n"
                "from app.models import Base, Category, SubCategory, Good, Size, Stock, Income, SupplierStock, Order, Sale, ReportDetail\n"
                "import os\n"
                "from dotenv import load_dotenv\n\n"
                "# Load .env file\n"
                "load_dotenv()\n\n"
                "config = context.config\n\n"
                "# Interpret the config file for Python logging.\n"
                "fileConfig(config.config_file_name)\n\n"
                "# Set up target metadata for 'autogenerate' support\n"
                "target_metadata = Base.metadata\n\n"
                "# Get the database URL from .env file\n"
                "config.set_main_option(\"sqlalchemy.url\", os.getenv(\"DATABASE_URL\"))\n\n"
                "def run_migrations_offline():\n"
                "    \"\"\"Run migrations in 'offline' mode.\"\"\"\n"
                "    url = config.get_main_option(\"sqlalchemy.url\")\n"
                "    context.configure(url=url, target_metadata=target_metadata, literal_binds=True)\n\n"
                "    with context.begin_transaction():\n"
                "        context.run_migrations()\n\n"
                "def run_migrations_online():\n"
                "    \"\"\"Run migrations in 'online' mode.\"\"\"\n"
                "    connectable = engine_from_config(\n"
                "        config.get_section(config.config_ini_section), prefix=\"sqlalchemy.\", poolclass=pool.NullPool\n"
                "    )\n\n"
                "    with connectable.connect() as connection:\n"
                "        context.configure(connection=connection, target_metadata=target_metadata)\n\n"
                "        with context.begin_transaction():\n"
                "            context.run_migrations()\n\n"
                "if context.is_offline_mode():\n"
                "    run_migrations_offline()\n"
                "else:\n"
                "    run_migrations_online()\n"
            )
        },
        ".env": (
            "DATABASE_URL=postgresql://username:password@localhost/wildberries_db\n"
            "WILDBERRIES_API_KEY=your_wildberries_api_key\n"
        ),
        "alembic.ini": (
            "[alembic]\n"
            "script_location = alembic\n\n"
            "[loggers]\n"
            "keys = root,sqlalchemy,alembic\n\n"
            "[handlers]\n"
            "keys = console\n\n"
            "[formatters]\n"
            "keys = generic\n\n"
            "[logger_root]\n"
            "level = WARN\n"
            "handlers = console\n"
            "qualname = \n\n"
            "[logger_sqlalchemy]\n"
            "level = WARN\n"
            "handlers = console\n"
            "qualname = sqlalchemy.engine\n"
            "# \"qualname=\" means \"don't override the logging name\"\n\n"
            "[logger_alembic]\n"
            "level = INFO\n"
            "handlers = console\n"
            "qualname = alembic\n"
            "# \"qualname=\" means \"don't override the logging name\"\n\n"
            "[handler_console]\n"
            "class = StreamHandler\n"
            "args = (sys.stderr,)\n"
            "level = NOTSET\n"
            "formatter = generic\n\n"
            "[formatter_generic]\n"
            "format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s\n\n"
            "[alembic:ini]\n"
            "sqlalchemy.url = driver://user:pass@localhost/dbname\n"
        )
    }
}

def create_project_structure(base_path, structure):
    for name, content in structure.items():
        path = os.path.join(base_path, name)
        if isinstance(content, dict):
            os.makedirs(path, exist_ok=True)
            create_project_structure(path, content)
        else:
            with open(path, 'w') as f:
                f.write(content)

base_path = '.'  # Или другой путь, где вы хотите создать проект
create_project_structure(base_path, project_structure)
